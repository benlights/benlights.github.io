<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[DBC Blog]]></title>
  <link href="http://benlights.github.io/atom.xml" rel="self"/>
  <link href="http://benlights.github.io/"/>
  <updated>2015-07-09T10:32:59-04:00</updated>
  <id>http://benlights.github.io/</id>
  <author>
    <name><![CDATA[Mendel Schneerson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Asking the Right Questions]]></title>
    <link href="http://benlights.github.io/blog/2015/04/03/asking-the-right-questions/"/>
    <updated>2015-04-03T00:03:10-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/03/asking-the-right-questions</id>
    <content type="html"><![CDATA[<h4>Week Nine Cultural Blog post</h4>

<h3>How not to Ask</h3>

<p>A few months ago I was playing around with Kali Linux using a virtual machine in windows. I was having a problem switching to the Superuser using the <code>su</code> command.</p>

<h4>Below is my question the way I originally posted it.</h4>

<hr />

<h5>su cannot execute bin/bash/****</h5>

<p>Hi I installed kali Linux on a vm machine and I cannot change my user to root from the terminal using su. sudo works fine but whe I try su it says   cannot execute bin/bash/****(my user name) not a directory.</p>

<p>Thank you,</p>

<h4>And this is what a helpful user turned it into.</h4>

<hr />

<h5>su cannot execute bin/bash/****</h5>

<p>I installed Kali Linux on a VM machine and I cannot change my user to root from the terminal using <code>su</code>. The command <code>sudo</code> works fine but when I try to <code>su</code>, it says &ldquo;cannot execute bin/bash/****(my user name) not a directory&rdquo;.</p>

<hr />

<p>Looking at the differences he did not change much if at all in terms of technical info. Where he did shine though is making my question readable. The question I submitted looked like a tweenager text. Looking back now I do not know if I would have answered it myself, seeing as the poster (me) did not really have any attention to detail.</p>

<p>And yes my question was answered and it resolved my issue.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Rebuilding My Blog]]></title>
    <link href="http://benlights.github.io/blog/2015/04/02/rebuilding-my-blog/"/>
    <updated>2015-04-02T21:19:37-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/02/rebuilding-my-blog</id>
    <content type="html"><![CDATA[<h4>Week Nine Technical Blog post</h4>

<h3>Octopress</h3>

<p>This week one of the challenges were to redo our blog. I decided to use a framework to help accomplish that.</p>

<p>The framework the I chose is called Octopress. I am using it now to generate this blog post. Getting it set up took a lot longer than I initially assumed it would take. Downloading and setting it up was pretty straight forward, the part that gave me the most trouble was how to integrate it with my existing blog that was being hosted by github pages.</p>

<p>To get it to work I had to delete my current repo that contained all of my current data. First I converted all of my previous posts to markdown. I used an online <a href="http://domchristie.github.io/to-markdown/">conversion tool</a> and was left with a little bit of formatting to do manually. I then created a new post for each of the older posts. (This is why all of my post written before April have the same date.) The next step was to create a new blank repo on github that pointed to my github page. Then I had to deploy and push my new blog.</p>

<p>After working through many issues I managed to get it live. This is why this blog has a &ldquo;new and improved&rdquo; look.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL Injection]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/sql-injection/"/>
    <updated>2015-04-01T21:36:19-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/sql-injection</id>
    <content type="html"><![CDATA[<h4>Week Eight Technical Blog Post</h4>

<h5>March 28, 2015</h5>

<h3>Little Bobby Tables</h3>

<p>Today I will be writing about SQL Injection. SQL Injection is a way to insert code maliciously into an entry field in an application. This attack can be used against any database but is usually used against websites.</p>

<p>There are a few different methods that are used to maliciously send commands to the server. Today I will be writing about one of them.</p>

<p>Incorrectly filtered escape characters.</p>

<p>This type of SQL Injection occurs when input from user entry fields are not filtered for escape characters. Escape characters are special characters used in programming that tell the program, that the character after them is not to be read the usual way rather as a different character. A common example is the &ldquo; \&rdquo;.</p>

<p>For example, an name entry field in a website. The website takes the input from the field and turns it into a select statement.</p>

<p><code>SELECT * from USERS WHERE name = (entry field);</code></p>

<p>This code looks for the specified user name and returns it from the database.</p>

<p>However this user name can be set to whatever the person on the other side of the field wants.</p>

<p>For example if    <code>'' or '1'='1'</code> is entered it turns into the following SQL statement    <code>SELECT * FROM users WHERE name = '' OR '1'='1'</code>;</p>

<p>This statement would return all the names in the database because <code>1 = 1</code> is always true.</p>

<p>This vulnerability can also be exploited to delete or modify data in the database. See the story of<a href="https://xkcd.com/327/"> Little Bobby Tables.</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ruby vs JavaScript]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/ruby-vs-javascript/"/>
    <updated>2015-04-01T21:33:19-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/ruby-vs-javascript</id>
    <content type="html"><![CDATA[<h4>Week Seven Technical Blog Post</h4>

<h5>March 22, 2015</h5>

<h3>Looping Through Arrays</h3>

<p>Today I tried a something different and made a vlog to explain the some of the differences between Ruby and Javascript.</p>

<p>Hope you enjoy!</p>

<p><a href="http://www.youtube.com/watch?v=tlR_Th2EaBg"><img src="http://img.youtube.com/vi/tlR_Th2EaBg/0.jpg" alt="" /></a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[When to Use What]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/when-to-use-what/"/>
    <updated>2015-04-01T21:30:24-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/when-to-use-what</id>
    <content type="html"><![CDATA[<h4>Week Six Technical Blog Post</h4>

<h5>March 15, 2015</h5>

<h3>Variable Scope</h3>

<p>Today I will be writing about variable scope. Scope defines where in a program a given variable is accessible. Ruby has four types of variables each can be accessed by different parts of a program hence &ldquo;scope&rdquo;. The four types are: local, instance, class and global.</p>

<p>The first type, Local Variables are local to the method or code they are declared in. Naming convention also states that they start either with an underscore <code>_</code> or a lower case letter. If you try to use a local variable in a method that it was not declared in it will give you an error: <code>"NameError: undefined local variable or method ``x' for main:Object"</code> This is because outside of the local method in which the variable was declared it does not exist.</p>

<p>The next type is the Instance Variable. This variable is available to any instance of a class. If I have a class <code>Bike</code> with an instance variable <code>@gears</code> and I instantiate a new instance of Bike, let&rsquo;s call it <code>mountain_bike</code>, <code>@gears</code> -the one that belongs to <code>mountain_bike</code> will only be accessible to <code>mountain_bike</code> not to any other instance of the class Bike. Instance Variables start with an <code>@</code>.</p>

<p>Class variables are similar to instance variables but it is shared across all instances of the class. Going on the earlier example <code>@@gear</code> will now be accessible not just to mountain_bike but to any instance of Bike. Class variables start with <code>@@</code>.</p>

<p>Global variables start with an <code>$</code> and are discouraged from use. This is because they can be read and changed from anywhere in the code and this makes it very hard to track down bugs. They are accessible to any and every bit of code.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Chutes and Ladders or D&amp;D?]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/chutes-and-ladders-or-d-and-d/"/>
    <updated>2015-04-01T21:28:47-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/chutes-and-ladders-or-d-and-d</id>
    <content type="html"><![CDATA[<h4>Week Five Technical Blog Post</h4>

<h5>March 8, 2015</h5>

<h3>Classes and How To Use Them.</h3>

<p>This is an example of a class.</p>

<p><img src="http://benlights.github.io/images/class-die.png" alt="" /></p>

<p>This class creates a die that can be used to play various games. Let us break up the code step by step.</p>

<p>The first step is to call the &ldquo;Class&rdquo; method, we do that by writing &ldquo;class&rdquo; and then the name we want to give it.(In this case Die. (Classes start with capital letters.)) Now it is time to call the attributes. An &ldquo;attribute&rdquo; is a method built in to the class &ldquo;class&rdquo;, in this case &ldquo;reader&rdquo; lets us read the amount of side the die has after we create it. Here we get to the methods the live in the Die class. The method &ldquo;initialize&rdquo; is used when creating most classes and it is what we use to set the amount of sides and what we want written on them. The next bit of code makes sure that we create a die with a minimum of one side.</p>

<p>Now comes the fun part do you see &ldquo;@label&rdquo; and &ldquo;@sides&rdquo;? They are what is called an instance variable, this means they can be used by any method that is contained in the class. All instance variables start with an &ldquo;@&rdquo; and they follow the same naming conventions that normal variables have.</p>

<p>After this we have a new method, a method that is contained in a class is called a instance method. This means it can only be called on an object of of the Die class. In our method &ldquo;roll&rdquo; we roll the die and it gives us one of the sides that we initialized the die with.</p>

<p>This class is very useful it can be used for a simple game of Chutes and Ladders or a complicated many sided die used in D&amp;D. Because we have created this class we can do whatever we want with it. We can give it as many sides as we want, we can put what ever we want on them. With a little tinkering we can even make it return more than one side every time we call &ldquo;roll&rdquo; on the die.</p>

<p>So what are you waiting for go and have fun!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enumerable Methods]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/enumerable-methods/"/>
    <updated>2015-04-01T21:27:12-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/enumerable-methods</id>
    <content type="html"><![CDATA[<h4>Week Four Technical Blog Post</h4>

<h5>February 28, 2015</h5>

<h3>Let&rsquo;s Get Profiling</h3>

<p>In Ruby there are many ways of getting the same things done. In one example you can write extremely lengthy code or you can use an Enumerator. An Enumerator is a method that takes a block of code and runs a collection of data on piece at a time through it. Today I will be writing about the Enumerator<code>group_by</code>.</p>

<p>group_by is used to break a collection into &ldquo;groups&rdquo; based on the criteria that you give it. When it is called on a collection of data, it can be a hash or an array (of strings or integers), it runs on each piece and groups them by some criteria that I give it. Then it returns a hash with the key representing the group and the value an array of the &ldquo;members&rdquo; of that group.</p>

<p>Here is some code that will show you how it works.</p>

<p><img src="http://benlights.github.io/images/group_by-length.png" alt="" /></p>

<p>In this example x was set to an array holding some strings, group_by was called to separate the strings by their length. The output was a hash<code>5 =&gt;["hello"] 3=&gt;["how", "are", "you"]</code> it grouped the strings the word &ldquo;hello&rdquo; has five letters as the key shows us, and the others all had three letters and are grouped together under the &ldquo;3&rdquo; key.</p>

<p>Another code example.</p>

<p><img src="http://benlights.github.io/images/group_by-modulus.png" alt="" /></p>

<p>In this code snippet we ran the range 1 through 20 (that&rsquo;s what (1..20) means) and separated them by the remainders of four. They are grouped by what the remainder would be if the number was divided by four.</p>

<p>This is a very useful tool to have when you are trying to separate items.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Arrays vs. Hashes]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/arrays-vs-hashes/"/>
    <updated>2015-04-01T21:25:45-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/arrays-vs-hashes</id>
    <content type="html"><![CDATA[<h4>Week Three Technical Blog Post</h4>

<h5>February 22, 2015</h5>

<h3>Showdown: Arrays vs. Hashes</h3>

<p>This week we have started learning Ruby. Ruby is a high level object-oriented language. There is much to explore in Ruby and I have going at it all week, but in this blog post I want to talk about two objects in Ruby that have helped enormously in completing my exercises for the week.</p>

<p>Arrays and Hashes. Arrays and Hashes are both ways of storing information that is assigned a label in Ruby. However they are not the same and each have their own uses.</p>

<p>Array: An array is list of information that is tied to its order in numbers. This list can be made up of &ldquo;strings&rdquo;(regular text), integers, floats(numbers with decimal points) and even other arrays. The way to initialize an array is to put a set of elments between square brackets like this:</p>

<p><code>a = [ 1, 'cat', 3.14 ]</code>   An array with three elements</p>

<p>Each element in the array is set to a specific number. 1 is set to 0 (arrays always start from zero) &ldquo;cat&rdquo; is 1 etc.</p>

<p>Now that they are set in the array they can be called and have methods work on them.</p>

<p>Hashes: Hashes are similar to arrays but you need to supply both the key and the value. For example if you want 1 to equal &ldquo;cat&rdquo; you would have to set it. Hashes are initialized with squiggly brackets like this:</p>

<pre><code>my_hash = {
  1 =&gt; 'cat'
  }
</code></pre>

<p>if I would want to call cat I would have to write 1. But with a hash I can set it to be anything I want.  <br/>
<code>my_hash = {
      'kitten' =&gt; 'cat'
      }</code></p>

<p>Now I have to call &lsquo;kitten&rsquo; to get back cat.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fat Stacks]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/fat-stacks/"/>
    <updated>2015-04-01T21:22:40-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/fat-stacks</id>
    <content type="html"><![CDATA[<h4>Week Two Technical Blog Post</h4>

<h5>February 15, 2015</h5>

<h3>Pad My Margins</h3>

<p>The first time you try to learn CSS (CSS stands for Cascading Style Sheets), you will hear about many different properties that can be used to change the underlying HTML. From the color of the font all the way to the spacing between lines. In this article I would like to talk about three things that determine the edges of the boxes we are using.</p>

<p>Margins: The term margin is relatively familiar to most people. We see them every day, in the books we read and the websites we visit. In CSS, margins give what we call &ldquo;white space&rdquo;; distance between the various elements on the page. This can make things easier to read and also change the way the entire web page is laid out. Margins can be specified for any of the four sides of the box. They are on the outside of the border.</p>

<p>Borders: Borders can be invisible or as wide as the page, they can also be anything in between. Borders encompass every element we have on the page. The border on some boxes my be set to zero pixels (a measurement of screen size) you may not see them but they are always there. Borders separate the edges of the boxes they contain. You can set a specific border to be blue or indigo dotted or dashed thick or thin. There is really no end to the combinations that can be made.</p>

<p>Padding: Padding is the lowest level of space between the contents of a box and it edges. Padding fits in between the border and the contents. Many times when a border has been set around a box filled with text, it is difficult to read as it butts up against the border. Padding gives the ability to create &ldquo;white space&rdquo; in between the text and the border.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There Is No Try Only Do]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/there-is-no-try-only-do/"/>
    <updated>2015-04-01T21:21:13-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/there-is-no-try-only-do</id>
    <content type="html"><![CDATA[<h4>Week One Technical Blog Post</h4>

<h5>February 5, 2015</h5>

<h3>Come and Git It</h3>

<p>Version control, roll it around on your tongue one more time, version control. Sounds like some thing the Terminator would say. As a gamer save points are gold; every time one is reached &ldquo;wheeeew safe&rdquo;. A boss just crushed you? No problem save point! That, my friends is version control in a nut shell. Whenever a change occurs in the material being worked on, whether it&rsquo;s code, spread sheets or the manuscript for the next best selling crime thriller, version control will log the change and allow you to roll back the change as if it never occurred. So how do you use version control you ask, well that&rsquo;s what git is for.</p>

<p>Git, sounds like an insult from the old south doesn&rsquo;t it? Slow down, the inventor is not American and cannot be blamed for how it may make you feel.(He actually stated that it is named after him; git being a British insult meaning &ldquo;jerk&rdquo;). His name is Linus Torvalds and is mostly famous for creating Linux an open source operating system (this is being written on a machine running Linux). So what does git actually do, you ask? Git is what you use to save your game as we alluded to earlier ,and recall (or revert) to that (or any other saved) point in time/development. Git also has tools to combine changes and has a detailed log of every edit. But what about multiple developers? If you are in Bora Bora and your partner is in Nome? No problem thats what GitHub is for.</p>

<p>GitHub is a website that is big into anime. Don&rsquo;t believe me? Their logo is a cross between an octopus and a cat called Octocat. This Octocat passes git repositories between developers. Ha I know I&rsquo;m pretty lame I can&rsquo;t help it. To stick with gaming analogies GitHub is like playing on Steam. You download the game from Steam and play it on your computer but many stats are saved online. GitHub is similar in it that it allows people to upload projects online making it possible for anyone to download it to their own computer and make improvements. After working on their locally downloaded copy users are then able to &ldquo;push&rdquo; it back to GitHub, where it gets reviewed and if found to be useful, added and merged with the main repository. There are millions of public repos on GitHub currently, with more being added every day. So come on and join us its never too late.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[DBC Cheat Sheet]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/dbc-cheat-sheet/"/>
    <updated>2015-04-01T21:19:02-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/dbc-cheat-sheet</id>
    <content type="html"><![CDATA[<h3>Ruby Hashes, Arrays, Strings, Integers</h3>

<h4>Hashes</h4>

<p>If you attempt to access a hash with a key that does not exist, the method will return nil.</p>

<p>You can create an empty hash with the new class method:<code>months = Hash.new</code></p>

<p>You can also use new to create a hash with a default value, which is otherwise just nil:<code>months = Hash.new( "month" )</code>or<code>months = Hash.new "month"</code></p>

<p>You can use any Ruby object as a key or value, even an array, so following example is a valid
<code>[1,"jan"] =&gt; "January"</code></p>

<h5>A list of useful methods.</h5>

<p><code>hash.delete_if { |key,value| block }</code>
Deletes a key-value pair from hash for every pair the block evaluates to true.</p>

<p><code>hash.each { |key,value| block }</code>
Iterates over hash, calling the block once for each key, passing the key-value as a two-element array.</p>

<p><code>hash.each_key { |key| block }</code>Iterates over hash, calling the block once for each key, passing key as a parameter.</p>

<p><code>hash.each_key { |key_value_array| block }</code>Iterates over hash, calling the block once for each key, passing the key and value as parameters.</p>

<p><code>hash.each_key { |value| block }</code>Iterates over hash, calling the block once for each key, passing value as a parameter.</p>

<p><code>hash.empty?</code>Tests whether hash is empty (contains no key-value pairs), returning true or false.</p>

<h4>Arrays</h4>

<p>Creating Arrays:<br/>
One way is with the new class method:<code>names = Array.new</code><br/>
You can set the size of an array at the time of creating array:<code>names = Array.new(20)</code><br/>
here is another method of Array, []. It works like this:<code>nums = Array.[](1, 2, 3, 4,5)</code><br/>
One more form of array creation is as follows :<code>nums = Array[1, 2, 3, 4,5]</code></p>

<h5>A list of useful methods.</h5>

<p><code>array.clear</code>Removes all elements from array.</p>

<p><code>array.collect { |item| block } [or]``array.map { |item| block }</code>Invokes block once for each element of self. Creates a new array containing the values returned by the block.</p>

<p><code>array.collect! { |item| block } [or] array.map! { |item| block }</code>Invokes block once for each element of self, replacing the element with the value returned by block.</p>

<p><code>array.delete_if { |item| block }</code>Deletes every element of self for which block evaluates to true.</p>

<p><code>array.each { |item| block }</code>Calls block once for each element in self, passing that element as a parameter.</p>

<p><code>array.each_index { |index| block }</code>Same as Array#each, but passes the index of the element instead of the element itself. array.empty? Returns true if the self array contains no elements.</p>

<p><code>array.eql?(other)</code>Returns true if array and other are the same object, or are both arrays with the same content.</p>

<h4>Strings</h4>

<h5>A list of useful methods.</h5>

<p><code>str * integer</code>Returns a new string containing integer times str. In other words, str is repeated integer imes.</p>

<p><code>str.capitalize</code>Capitalizes a string.</p>

<p><code>str.casecmp</code>Makes a case-insensitive comparison of strings.</p>

<p><code>str.chop</code>Removes the last character in str.</p>

<p><code>str.downcase</code>Returns a copy of str with all uppercase letters replaced with lowercase.</p>

<p><code>str.include? other_str [or] str.include? fixnum</code>Returns true if str contains the given string or character.
<code>str.reverse</code>Returns a new string with the characters from str in reverse order.</p>

<p><code>str.split(pattern=$;, [limit])</code>Divides str into substrings based on a delimiter, returning an array of these substrings. If pattern is a String, then its contents are used as the delimiter when splitting str. If pattern is a single space, str is split on whitespace, with leading whitespace and runs of contiguous whitespace characters ignored.</p>

<p><code>str.swapcase</code>Returns a copy of str with uppercase alphabetic characters converted to lowercase and lowercase characters converted to uppercase.</p>

<h4>Integers</h4>

<h5>A list of useful methods.</h5>

<p><code>next → integer</code> Returns the Integer equal to int + 1, same as #next.</p>

<p><code>pred → integer</code>Returns the Integer equal to int</p>

<p><code>odd? → true or false</code>Returns true if int is an odd number.</p>

<p><code>Round([ndigits]) → integer or float</code>Rounds int to a given precision in decimal digits (default 0 digits). Precision may be negative. Returns a floating point number when ndigits is positive, self for zero, and round down for negative.</p>

<p><code>chr([encoding]) → string</code>Returns a string containing the character represented by the int‘s value according to encoding.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Conflict]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/conflict/"/>
    <updated>2015-04-01T21:16:57-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/conflict</id>
    <content type="html"><![CDATA[<h4>Week Eight Cultural Blog Post</h4>

<h5>March 29, 2015</h5>

<h3>Conflict and How To Deal With It.</h3>

<p>Today I will be writing about a conflict I had and looking back at it.</p>

<p>out what is inside it looks like my handbags are a lost but the laptop bag is visible. So now I&rsquo;m waiting to find out if the laptop is in it.</p>

<p>A few months ago I flew to Fl. with some friends for a wedding. At the airport one of my friends was getting out of hand and acting as if the wedding and the drinking had started. It was very embarrassing walking through the crowded airport with him screaming and cursing I asked him to calm down and to please stop making a scene, he refused and the fight started.</p>

<p>Looking back at the conflict the major emotions I was feeling were embarrassment and frustration. The actions that I took then to try and solve the problem were to speak to him and to try to get him to realize that he was making people uncomfortable.</p>

<p>If I can change the past I would go back and and change the way I spoke to him. I would speak in a calm and collected manner and not show him my aggravation.</p>

<p>I learned from this experience to control my emotions better and not to let the other person see that he or she has effected me.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Combating Stereotype Threat]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/combating-stereotype-threat/"/>
    <updated>2015-04-01T21:15:45-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/combating-stereotype-threat</id>
    <content type="html"><![CDATA[<h4>Week Seven Cultural Blog Post</h4>

<h5>March 22, 2015</h5>

<h3>Values in my life</h3>

<p>Last week I wrote about Stereotype Threat and this week I will be addressing some values in my life that I feel can help me avoid it and work around it.</p>

<p>Some of the times in my life when I&rsquo;ve been the happiest, the proudest, or the most satisfied have been when I have felt accomplishment and competence. I think that both of these values are important to to have to help yourself and to build self confidence. When a person feels that they have accomplished something noteworthy they are buoyed by that fact and it helps them later on when they fail at something and want to give up.</p>

<p>I think that if someone is experiencing Stereotype Threat they can think back at all they have accomplished and shake off the feeling that they are not good enough just because people think so. Innate self worth is important to everyone in every stage in life.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Stereotype Threat]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/stereotype-threat/"/>
    <updated>2015-04-01T21:14:21-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/stereotype-threat</id>
    <content type="html"><![CDATA[<h4>Week Six Cultural Blog Post.</h4>

<h5>March 15, 2015</h5>

<h3>What is Stereotype Threat?</h3>

<p>This week I will be writing about an issue called Stereotype Threat. To quote from Wikipedia: &ldquo;Stereotype threat is a situational predicament in which people are or feel themselves to be at risk of confirming negative stereotypes about their social group.&rdquo; In other words it is a mechanism that can cause lowered intellectual performance in the person that is experiencing it.</p>

<p>Thankfully to my knowledge I have not been impacted by Stereotype Threat. Being a religious Jew I have heard from my grandmother how the daily discrimination she faced in the former Soviet Union, impacted her in every facet of life. Unfortunately even here in the United States there are people that are being discriminated against even if not in a institutional way. This discrimination effects them even many years down the road.</p>

<p>In my opinion one of the things everybody can do to reduce the occurrence of Stereotype Threat is by providing role-models that actively disprove the racial stereotype and show that no matter who a person is it can be done.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dealing With Human Beings.]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/dealing-with-human-beings/"/>
    <updated>2015-04-01T21:13:09-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/dealing-with-human-beings</id>
    <content type="html"><![CDATA[<h4>Week Five Cultural Blog Post.</h4>

<h5>March 8, 2015</h5>

<h3>Pairing and Feedback.</h3>

<p>Today I will be talking about something that was absolutely foreign to me before I joined DBC.</p>

<p>I have always been a loner when it came to work. It might not have been on purpose but that is the way it has been for as long as I can recall. When I read in the Phase 0 manual about mandatory pairing I was worried that it would be stilted for me and unproductive. The first few pairing sessions seemed to support my hypothesis as they were not hard but I did not feel like I was gaining much from them. However when I started pairing on actual coding challenges the time flew by and by the end of the session I was very proud of my work. Initializing a pairing session is still hard for me but once I get into the meat of the issue it becomes us vs. the code.</p>

<p>In DBC pairing does not come alone. After every session you have to leave feedback for your partner. Reading some of the feedback I received in the beginning was hard. I knew I had to improve but it is easier to blame others but my own shortcomings. Determined to do something about it I started off every video call with a disclaimer: &ldquo;I have been informed that sometimes I can get ahead of myself and speak too quickly possibly overriding your ideas. If you feel that I am doing that please point it out to me and help me I am trying to change&rdquo;. Ever since then my feedback has improved and I have and overwhelming majority of positive feedback.</p>

<p>Writing feedback on the other hand is another animal entirely. It is hard to point out something that is bothering you about your pair particularly when the session has gone swimmingly otherwise. What I learned is that the session in general has to be framed was it good, great or just mediocre? Once the outline has been written it is easier to write feedback that confirms to the three rules. A.S.K (Actionable, Specific, and Kind)</p>

<p>In conclusion DBC&rsquo;s system has helped me immensely, notwithstanding the fact that it was extremely hard for me in the beginning to give and receive feedback the correct way. Once I had gotten over the hump I actively look to see what feedback I have been given and how I can improve based off of it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leaping Before Looking]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/leaping-before-looking/"/>
    <updated>2015-04-01T21:10:36-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/leaping-before-looking</id>
    <content type="html"><![CDATA[<h4>Week Four Cultural Blog Post</h4>

<h5>February 28, 2015</h5>

<h3>Technology Doesn&rsquo;t Always Work.</h3>

<p>We have to face the facts, tech does not always work and when it fails the results can be disastrous. There are a plethora of examples to choose from, from aircraft that are stuck on the ground because the computer systems in the control tower are down, to aircraft that fall out of the sky. On a weekly basis some thing on this earth malfunctions and people get hurt.</p>

<p>To exacerbate the situation a lot of technology gets pushed into mainstream use before it is finished and the major bugs worked out. From new medical treatment to wearable gadgets, technology has a history of failing at first. Unfortunately people die from these mishaps.</p>

<p>I.m.h.o. many of these disasters can be avoided if the people that make the decision to release the technology have training in that field. This does not mean that the entire board has to be PHDs rather the final arbiter for release should be a third party that is involved and qualified in the field. This removes the monetary pressure to release tech that is faulty and at the same time leaves a clear chain of responsibility in event of a preventable bug.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Mind Over Matter]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/mind-over-matter/"/>
    <updated>2015-04-01T21:09:11-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/mind-over-matter</id>
    <content type="html"><![CDATA[<h4>Week Three Cultural Blog Post.</h4>

<h5>February 22, 2015</h5>

<h3>Thinking Styles</h3>

<p>We have just finished Unit One in Dev Bootcamp. It was tough it was fun and most of all it was a lesson to myself about myself. I know that sounds pretty strange but bear with me. One of the main tenants of DBC is feedback. Looking at the feedback I have received over the past three weeks has made it obvious to me what I have to work on.</p>

<p>After getting accepted to DBC we had to fill out a long questionnaire about ourselves and how we think. One of the objects was to identify what type of learner we are. According to Anthony F. Gregorc&rsquo;s Mind Styles there are four main qualities that people have when it comes to learning and assimilating information. Each type has its&#8217; own strengths and weaknesses. For more information see<a href="http://web.cortland.edu/andersmd/learning/gregorc.htm">here</a>. To quote him &ldquo;No one is a &#8220;pure&rdquo; style. Each of us have a unique combination of natural strengths and abilities.&ldquo; But each person has one stronger &#8220;ability&rdquo; in the way he interacts with learning.</p>

<p>When I took the quiz to test my learning pattern(link is<a href="http://www.thelearningweb.net/personalthink.html"> here</a>) overall it was pretty equal with one pattern edging out the others by one point. For me it was Abstract Sequential (AS). Looking at the list of what an AS type of learner likes and dislikes brings me right back to my earlier musing on feedback. In most of my feedback I have been given there is a sentence there about me going too fast or speaking over the other person. Working on this and the rest of the items on the list of what is hard for AS learners will be my personal challenge over the next few months at DBC.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Fireside Chat]]></title>
    <link href="http://benlights.github.io/blog/2015/04/01/fireside-chat/"/>
    <updated>2015-04-01T21:01:40-04:00</updated>
    <id>http://benlights.github.io/blog/2015/04/01/fireside-chat</id>
    <content type="html"><![CDATA[<h4>Week One Cultural Blog Post</h4>

<h5>February 6, 2015</h5>

<h3>Getting there one step at a time.</h3>

<p>Learning is fun, exhilarating, life changing and scary. Looking back at the past week I can see a glimpse of the future. Hard work and much satisfaction is my fate.</p>

<p>It is difficult to take a small fraction of time and extrapolate what will be for the next 18 weeks. But after reading, listening and watching about DevBootCamp I can honestly say that my expectations have stayed true to form. This week is the first taste of a delicious feast. I have been looking for a long time for a structured learning environment where I can learn and grow. I am excited and thankful that I have found DevBootCamp.</p>

<p>After receiving the curriculum I was feeling overwhelmed, so much to do; so little time. However after going through the challenges and seeing how competently they were arranged I feel that I can swim. The greatest thing is that I am not going about it on my own. I have my cohort and instructors to support me. The tools are being given to me but I will have to make them my own.</p>
]]></content>
  </entry>
  
</feed>
